name: CI → ECR

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write         # for OIDC
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        # Option A: GitHub OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/GitHubECRPushRole
          aws-region: us-east-1
        # Option B: Secrets-based (uncomment if you’re not using OIDC)
        # uses: aws-actions/configure-aws-credentials@v2
        # with:
        #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #   aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@v0.6.0
        with:
          image-ref: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vulnerable-java:latest
          format: table
          exit-code: 0     # set >0 to fail the build on vuln

      - name: Build, tag, and push Docker image
        run: |
          REPO=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/vulnerable-java
          IMAGE_TAG=${GITHUB_SHA::8}
          docker build -t $REPO:latest -t $REPO:$IMAGE_TAG .
          docker push $REPO:latest
          docker push $REPO:$IMAGE_TAG
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
